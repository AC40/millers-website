---
var {
    class: className,
    prefix: string,
	string: string,
    link: string,
    nostyle: boolean
} = Astro.props;

var prefix = reverse(Astro.props.prefix)
var part1: string = ""
var part2: string = ""

function splitString() {
    
    string = reverse(Astro.props.string)

    part1 = string.slice(0, string.length/2)
    part2 = string.slice(string.length/2)
}

function reverse(str: string): string {
    
    if (str == undefined) {
        return ""
    }
    
    if (str.length > 1) {
        return str.split('').reverse().join('')
    } else {
        return str
    }
}

function encode(str: string): string {
    
    const reversed = reverse(str)
    return [reversed.slice(0, 1), "salt", reversed.slice(1)].join('')
}

function isLink(): boolean {
    return !(Astro.props.link == "")
}

function applyStyle(): boolean {
    return !(Astro.props.nostyle)
}

splitString()
---
{/* --- USAGE EXAMPLE ---

---
import Secret from "./Secret.astro";
---

<Secret
    string="stefan@sr-leadership.de"
    link="mailto:stefan@sr-leadership.de"
    nostyle={true}
/>
<br />
<Secret
    prefix="+49 )0(178"
    string="1426224"
    link="tel:+49 178 1426224"
    nostyle={true}
/>

--- END USAGE EXAMPLE --- */}
{/* ----------------- */}
{/* This type of display prevents webcrawlers from harvesting email addresses */}
<astro-secret data-string={string} data-link={encode(Astro.props.link)} data-isLink={isLink()}>
    <button class:list={["reverse no-btn-style", isLink() ? "link-style" : "", className]} >
        {/* 
        NOTE: By default, there would be a gap between part1's span and part2's span. There are two solution:
        1.  The comment hack
        2. The font-size: 0 on the parent, and resetting it on the children
    
        Here option 1 is choosen, despite being quite hacky.
        Reason: Option 2 does not allow for easy styling from outsite
        */}
        <span class={`secret-part1 ${applyStyle() ? "" : "nostyle"}`}>{ part1 }</span><!--
        --><span class="_honeypot"></span><!--
        --><span class={`secret-part2 ${applyStyle() ? "" : "nostyle"}`}>{ part2 }</span><!--
        --><span class={`prefix ${applyStyle() ? "" : "nostyle"}`}> { prefix }</span>
    </button>
</astro-secret>


<style>
    ._honeypot {
        display: none;
        margin: 0;
    }

    .reverse { 
        unicode-bidi: bidi-override; 
        direction: rtl; 
    }

    .button-style:hover {
        text-decoration: underline;
        cursor: pointer;
    }

	.link-style span.nostyle {
		color: var(--c-white) !important;
	} 

    .link-style:hover span.nostyle {
        color: var(--navc-hover) !important;
        text-decoration: underline;
    }

    @media screen and (max-width: 400px) {
        .scale-on-small-screen {
            font-size: 0.8em !important;
        }
    }
</style>

<script>
    function reverse(str: string): string {
        
        if (str == undefined) {
            return ""
        }
        
        if (str.length > 1) {
            return str.split('').reverse().join('')
        } else {
            return str
        }
    }

    function decode(str: string) {
        const unsalted = str.slice(0, 1) + str.slice(5)
        console.log(unsalted.split('').reverse().join('') ?? "");
        return reverse(unsalted)
    }
    // Define the behaviour for our new type of HTML element.
    class Secret extends HTMLElement {
        constructor() {
            super();

            const self = this.querySelector("button");
            const link = this.dataset.link
            const isLink = this.dataset.isLink

            // When button is clicked, open link
            if (self == null) {
                return
            }

            if (isLink) {
                self.style.color = "var(--textc-link)"
            } else {
                self.style.cursor = "initial"
            }

            self.addEventListener('click', () => {
                if (link != null) {
                    document.location.href = decode(link)
                }
            })
        }

        
    }

    // Tell the browser to use our AstoSecret class for <astro-heart> elements.
    customElements.define("astro-secret", Secret);
</script>